#version 460
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage  : require
#extension GL_EXT_mesh_shader          : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_ARB_shader_draw_parameters: require
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require

layout (constant_id = 0) const uint NUM_TASK_SHADER_INVOCATIONS = 32; // <- Expected to be set to 32 for Nvidia on host side.
layout (constant_id = 1) const uint NUM_MESH_SHADER_INVOCATIONS = 32; // <- Expected to be set to 32 for Nvidia on host side.
layout (local_size_x_id=1,local_size_y=1,local_size_z=1) in;
layout (triangles,max_vertices=64,max_primitives=126) out;

layout (set = 1, binding = 0) uniform Matrices {
    mat4 view;
    mat4 projection;
};


taskPayloadSharedEXT uint meshletidxes[ NUM_TASK_SHADER_INVOCATIONS ];

struct meshlet{
	uint mDataOffset;
	uint8_t mVertexCount;
	uint8_t mTriangleCount;
};
struct extended_meshlet{
	mat4 mTransformationMatrix;
	uint mMaterialIndex;
	uint mTexelBufferIndex;
	uint mModelIndex;
	
	meshlet mGeometry;
};


layout(set = 2, binding = 0) buffer BoneMatrices 
{
	mat4 mat[];
} boneMatrices[];

layout (std430,set=3,binding=0) buffer vertssbo{
	vec3 positionBuffers;
	vec3 normalBuffers;
	vec2 texCoordsBuffers;
	u8vec4 boneIndicesBuffers;
	vec4 boneWeightsBuffers;
}vertssbos[];


layout(std430, set = 4, binding = 4) buffer IndicesBuffer    { uint mIndices[];    } indicesBuffers[];
layout(std430, set = 4, binding = 4) buffer IndicesBuffer_u8 { uint8_t mIndices[]; } indicesBuffers_u8[];
layout(set = 5, binding = 0) buffer MeshletsBuffer { extended_meshlet mValues[]; } meshletsBuffer;


layout (location = 0) out PerVertexData
{
	vec3 positionWS;
	vec3 normalWS;
	vec2 texCoord;
	flat int materialIndex;
	vec3 color;
} v_out[];

#define MAX_COLORS 10
vec3 meshletcolors[MAX_COLORS] = {
  vec3(0.9, 0.1, 0.1),
  vec3(0.7, 0.2, 0.2),
  vec3(0.5, 0.3, 0.3),
  vec3(0.3, 0.4, 0.5),
  vec3(0.2, 0.5, 0.7),
  vec3(0.1, 0.7, 0.9),
  vec3(0.3, 0.6, 0.8),
  vec3(0.6, 0.8, 0.9),
  vec3(0.8, 0.9, 0.95),
  vec3(1.0, 1.0, 1.0)
};


void main(){

	uint mshltidx = meshletidxes[gl_WorkGroupID.x];
	uint invid = gl_LocalInvocationID.x;
	
	uint vcount = uint(meshletsBuffer.mValues[mshltidx].mGeometry.mVertexCount);
	uint tcount = uint(meshletsBuffer.mValues[mshltidx].mGeometry.mTriangleCount);
	uint materialIndex        = meshletsBuffer.mValues[mshltidx].mMaterialIndex;
	mat4 transformationMatrix = meshletsBuffer.mValues[mshltidx].mTransformationMatrix;


	
	uint modelIdx			  = meshletsBuffer.mValues[mshltidx].mModelIndex;
	uint texelBufferIndex     = meshletsBuffer.mValues[mshltidx].mTexelBufferIndex;
	
	uint indexOffset = uint(meshletsBuffer.mValues[mshltidx].mGeometry.mDataOffset + vcount);

	
	for (uint i = invid; i < vcount; i += NUM_MESH_SHADER_INVOCATIONS)
	{
		uint vi = uint(indicesBuffers[texelBufferIndex].mIndices[int(meshletsBuffer.mValues[mshltidx].mGeometry.mDataOffset + i)]);


		vec4 posMshSp = vec4(vertssbos[vi].positionBuffers, 1.0);
		vec3 nrmMshSp = vertssbos[vi].normalBuffers;
		vec4 boneWeights = vertssbos[vi].boneWeightsBuffers;
		u8vec4 boneIndices = vertssbos[vi].boneIndicesBuffers;
		
  mat4 skinMat =
    boneWeights.x * boneMatrices[modelIdx].mat[boneIndices[0]] +
    boneWeights.y * boneMatrices[modelIdx].mat[boneIndices[1]] +
    boneWeights.z * boneMatrices[modelIdx].mat[boneIndices[2]] +
    boneWeights.w * boneMatrices[modelIdx].mat[boneIndices[3]];

	vec4 aniPos = projection * view * skinMat * posMshSp;
		
 
		gl_MeshVerticesEXT[i].gl_Position = aniPos;
 
		v_out[i].positionWS = aniPos.xyz;
		v_out[i].normalWS = nrmMshSp;
		v_out[i].texCoord = vertssbos[vi].texCoordsBuffers;
		v_out[i].materialIndex = int(materialIndex);
		v_out[i].color = meshletcolors[mshltidx % MAX_COLORS];
	}


	SetMeshOutputsEXT(vcount, tcount);
	
	for (uint i = invid; i < tcount; i += NUM_MESH_SHADER_INVOCATIONS)
	{
		gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
			uint(indicesBuffers_u8[texelBufferIndex].mIndices[int(indexOffset*4 + i*3 + 0)]),
			uint(indicesBuffers_u8[texelBufferIndex].mIndices[int(indexOffset*4 + i*3 + 1)]),
			uint(indicesBuffers_u8[texelBufferIndex].mIndices[int(indexOffset*4 + i*3 + 2)])
		);
	}

}
